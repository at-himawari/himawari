[
  {
    "slug": "c468214e",
    "content": "## あなたは、ITエンジニアですか？\n\nあなたは、ITエンジニアですか？\n\nきっと、ここでYESと答えるエンジニアは多いことでしょう。\n\n私は、これまでいくつかの業務系アプリケーションを作ってきました。\n\nしかし、１人で実運用に耐えられるアプリケーションを作成していなかったことと、ITエンジニアなら自身のテックブログくらい自分で作るべきだと考え、この度Himawari Projectという個人事業を始めるとともに、Webサイト兼テックブログを書くことを始めました。\n\n拙い部分もあるかと思いますが、どうかお付き合いください。\n\n## Webサイトの種類\n\n一般的に見るサイトには、ソース（HTML,CSS,JavaScript)を配信する方式には、以下の３つがあるようです。\n\n> • SPA (Single Page Application) に向いているアプリケーション: \n>\n>    ◦ 管理画面系 \n>\n>    ◦ SEOやSNSでのシェアがそれほど重要ではない、またはURLがあまり関係ないアプリケーション。これは、SPAではHTMLの内容がどのページでも基本的に同じになり、JavaScriptでレンダリングし直すため、OGP（Open Graph Protocol）が正しく表示されない可能性があるためです。また、GoogleのクローラーはJavaScriptを解釈すると言われているものの、SEOが主要な流入経路となるサイトではリスクが残るとされています。\n>\n> • SSR (Server Side Rendering) に向いているアプリケーション:  \n>\n>   ◦ 大規模なサービス   \n>\n>  ◦ リアルタイム性が求められるアプリケーション    \n>\n> ◦ 万能型であり、従来のWebアプリケーションのあり方に近いとされています。SEOやOGPの問題がなく、ユーザーのアクセスごとに適切な情報をサーバサイドでレンダリングして返すためです。ただし、サーバの管理（デプロイ、バージョンアップ、セキュリティアップデート、メンテナンスなど）が必要となり、コストと手間がかかる点がデメリットです。\n>\n> • SSG (Static Site Generation) に向いているアプリケーション:    \n>\n> ◦ ブログ    \n>\n> ◦ ドキュメントサイト    \n>\n> ◦ 企業サイト    \n>\n> ◦ これらは、コンテンツが頻繁に更新されない、静的な情報中心のサイトに適しています。SSGは事前にビルド時にHTMLを生成するため、非常に高速な表示が可能であり、静的ファイルをホスティングするだけで済むためサーバの維持管理コストが低いというメリットがあります。これらの分類は、開発するWebサイトやアプリケーションの目的、コンテンツの性質、更新頻度、SEOの重要性、運用・保守のコストなどを考慮して最適な構成を選択する上で役立ちます。\n\n私が作成するアプリケーションは、業務系アプリケーションばかりだったので、社内に閉じたものでした。しかもシェアするシチュエーションは全くありません。当然の如く今回のブログサイト制作もSPAで制作を始めてしまいました。\n\nあ、やばいと思った読者の方。大丈夫です。まだ、間に合います（笑）\n\n## SPAだと何がまずいのか\n\nSNSのシェアと、SEOに圧倒的に不利です。\n\nSPAだと、サーバーからindex.htmlがクライアント側に渡されるわけですが、同じページ内で遷移しているように見えながらも、実際には完全なページ遷移は行われません。  \n\n ユーザーがクリックしても、最初からHTTPリクエストを投げに行くのではなく、JavaScriptがURLを書き換え、そのURLに基づいて必要な情報だけを再度取得します。\n\nそのため、GoogleやXのクローラーは、JavaScriptを解釈してインデックスを行うわけですが解釈はあくまで努力目標でしかなく、実際にはTOPページしかインデックスされていないというケースが大半です。\n\nまた、SPAではOpenGraph(XにURL乗せると自動でサムネとか生成してくれるやつ）に対応するのがプログラム的にもクローラー的にも難しいです。\n\n* プログラム的に難しい\n\n  * コンポーネント分割したアプリケーションでは、動的にmetaタグを付け替える必要がある。それをやってくれるライブラリも用意されているが、OpenGraphやクローラーに認識されるかは運ゲー。(TypeScriptもとい、JavaScript依存）\n* クローラー的に難しい\n\n  * プログラム的に難しいとほぼ同じ原理ですが、JavaScriptを多少なりとも認識していますがそれがどこまでかはわからないため、ときに他のサイトよりもSSGよりもSPAが遅いため、クローラーがタイムアウトする可能性だってあります。\n\n上記の理由から、SEOやシェア機能に非常に悪影響を及ぼしてしまうのです。\n\n## じゃあ、どうやってSSGするの？\n\n### １つの失敗\n\n読者の中には、なんでこんなことわざわざ記事にしているの？と考える人もいることでしょう。そう。私は、最初の選択を間違えたのです（笑）\n\n業務で、Viteを使ったので何も考えずに本プロジェクトのフレームワークにもViteを採用してしまいました。Nextであれば、設定を変えるだけでSSGが可能です(これは、数多のテックブログが解説しているので省く）がViteはできません。\n\n### 落とし穴\n\nvite-plugin-ssrというプラグインがあるらしい。しかし、バージョンアップかなんかでVikeという名前に変更された。\n\nやっかいなことにVikeになってからの記事はそんなに多くない。（公式的には、名前が変わっただけで、機能は何も変わっていないらしい）\n\n### Vikeを使ってみよう\n\nまずは、使った結果から。結論ファースト。\n\n**ASIS**\n\n```\n.\n├── .github\n│   └── workflows\n│       └── deploy.yml\n├── public\n│   ├── ...\n├── src\n│   ├── components\n│   │   ├── Footer.tsx\n│   │   ├── Header.tsx\n│   │   ├── NewsSection.tsx\n│   │   ├── ScrollToTop.ts\n│   │   └── VideoCard.tsx\n│   ├── App.css\n│   ├── App.tsx\n│   ├── Home.tsx\n│   ├── index.css\n│   ├── License.tsx\n│   ├── main.tsx\n│   ├── PrivacyPolicy.tsx\n│   ├── ProjectPolicy.tsx\n│   ├── SoftwareDevelopment.tsx\n│   ├── VideoProduction.tsx\n│   ├── vite-env.d.ts\n│   └── YouTube.tsx\n├── .gitignore\n├── eslint.config.js\n├── index.html\n├── LICENSE\n├── package-lock.json\n├── package.json\n├── postcss.config.js\n├── README.md\n├── tailwind.config.js\n├── tsconfig.app.json\n├── tsconfig.json\n├── tsconfig.node.json\n└── vite.config.ts\n```\n\n**TOBE**\n\n```\n.\n├── .github\n│   └── workflows\n│       └── deploy.yml\n├── public\n│   └── ....\n├── scripts\n│   └── generate-posts.mjs\n├── src\n│   ├── components\n│   │   ├── Footer.tsx\n│   │   ├── HatenaIcon.tsx\n│   │   ├── Header.tsx\n│   │   ├── MarkdownComponents.tsx\n│   │   ├── NewsSection.tsx\n│   │   └── VideoCard.tsx\n│   ├── content\n│   │   ├── blog\n│   │   │   ├── article\n│   │   │       ├── ...\n│   ├── pages\n│   │   ├── blog\n│   │   │   ├── @slug\n│   │   │   │   ├── +config.ts\n│   │   │   │   ├── +data.ts\n│   │   │   │   ├── +description.ts\n│   │   │   │   ├── +onBeforePrerenderStart.ts\n│   │   │   │   ├── +Page.tsx\n│   │   │   │   └── +title.ts\n│   │   │   ├── +config.ts\n│   │   │   ├── +data.ts\n│   │   │   └── +Page.tsx\n│   │   ├── index\n│   │   │   ├── +config.ts\n│   │   │   └── +Page.tsx\n│   │   ├── license\n│   │   │   ├── +data.ts\n│   │   │   └── +Page.tsx\n│   │   ├── privacy\n│   │   │   ├── +data.ts\n│   │   │   └── +Page.tsx\n│   │   ├── project\n│   │   │   ├── +data.ts\n│   │   │   └── +Page.tsx\n│   │   ├── software\n│   │   │   └── +Page.tsx\n│   │   ├── video\n│   │   │   └── +Page.tsx\n│   │   ├── youtube\n│   │   │   └── +Page.tsx\n│   │   ├── +config.ts\n│   │   ├── +Head.tsx\n│   │   └── Layout.tsx\n│   ├── styles\n│   │   └── index.css\n│   ├── types\n│   │   ├── pageContext.ts\n│   │   ├── pageContextPost.ts\n│   │   ├── pageContextPosts.ts\n│   │   └── Post.ts\n├── .gitignore\n├── eslint.config.js\n├── LICENSE\n├── package-lock.json\n├── package.json\n├── postcss.config.js\n├── README.md\n├── tailwind.config.js\n├── tsconfig.json\n├── tsconfig.tsbuildinfo\n└── vite.config.ts\n```\n\n見ただけで、悪寒がしますね。実務だと大混乱と大遅延を巻き起こします。\n\n詳しく何をやってるかは、公式のホームページ(<https://vike.dev/>)で翻訳をかけて見てもらうとしてここでは、何をやったかをざっくり解説します。\n\n前提として、Vite + Reactの構成からの導入を行うものとします。\n\n\n\n### 作業\n\n#### インストール\n\n```\nnpm i vike vike-react\n```\n\n\n\nvite.config.tsに以下の設定を加えます。\n\ndefineConfig.plugins.vike()\n\n```\nimport { defineConfig } from 'vite';\nimport react from '@vitejs/plugin-react';\nimport vike from 'vike/plugin';\nimport tailwindcss from 'tailwindcss'\nimport autoprefixer from 'autoprefixer'\nimport path from 'path';\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    vike(),\n  ],\n  css: {\n    postcss: {\n      plugins: [\n        tailwindcss,\n        autoprefixer\n      ]\n    }\n  },\n  ssr: {\n    noExternal: ['tailwindcss']\n  },\n  resolve: {\n    alias: {\n      '@': path.resolve(__dirname, 'src'),\n    },\n  },\n});\n```\n\ncss、ssr、resolveの設定はなくてももしかたら動くかも。AIに聞きまくっていたところなので不要な設定も入り込んでいるかもしれません。\n\n#### フォルダ構成\n\nTOBEのフォルダ構成を見ていただくと分かる通り、src/pages配下にwebページにアクセスしたときのパスとその配下に、+XXX.ts(x)というファイルがあります。\n\nsrc/pages/indexだけは、webページの｢/｣にリダイレクトされます。いわゆる、ホームページをここに作っておくと良さそうです。\n\n\n\n#### コンポーネント\n\nここでは、+XXX.ts(x)を解説しておこうと思います。結構複雑なので、若干正確性に欠部分がありますがご容赦ください。\n\n先頭に+を付けて、フレームワーク側で定義されている名前をつけると、その機能として認識してくれます。\n\n##### +Page.tsx\n\nクライアントサイドで表示する画面を定義できます。tsxなので、基本的にReact.FCを返して終わりです。\n\nふつーのReactとあんまり変わりません。\n\nサンプルコードです。\n\n```\nimport Header from \"../../components/Header\";\nimport Footer from \"../../components/Footer\";\nimport ReactMarkdown from \"react-markdown\";\nimport { usePageContext } from \"vike-react/usePageContext\";\nimport { PageContext } from \"../../types/pageContext\";\nimport { markdownComponents } from \"../../components/MarkdownComponents\";\n\nconst License: React.FC = () => {\n  const pageContext = usePageContext() as { data: PageContext };\n  const content = pageContext.data?.content || \"読み込み中...\";\n  \n  return (\n    <>\n      <Header />\n      <section id=\"license\" className=\"py-12\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <ReactMarkdown components={markdownComponents}>{content}</ReactMarkdown>\n        </div>\n      </section>\n      <Footer />\n    </>\n  );\n};\n\nexport default License;\n\n```\n\nその他、+data.tsや+onBeforeRender.tsからのデータを受け取ることができます。\n\n##### +data.ts と +onBeforeRender.ts\n\nサーバーサイドで実行されるデータ取得ロジックです。\n\n例えば、データベース接続のために、SQLを投げたり（ORMでもOK）APIリクエストを投げたりして、その結果を+Page.tsxに返してあげます。\n\n+data.tsとonBeforeRender.tsの違いは、+Page.tsxへのデータの返し方にあります。\n\n+data.tsでは、pageContext.data.xxxに格納されるのに対して、+onBeforeRender.tsではpageContext.xxxでデータを返してあげることができます。（誰得？）\n\n例で見てみましょう\n\n**+data.ts**\n\n```\nimport fs from \"node:fs\";\nimport path from \"node:path\";\nimport matter from \"gray-matter\";\n\nexport function data() {\n  // プロジェクトのルートディレクトリからの相対パスでMarkdownファイルを読み込みます\n  const filePath = path.join(process.cwd(), \"src\", \"content\", \"license.md\");\n  const fileRawContent = fs.readFileSync(filePath, \"utf-8\");\n\n  // gray-matterでファイル内容をパースし、本文(content)とフロントマター(data)を分離します\n  const { content } = matter(fileRawContent);\n  return {\n    content, // pageContext.data.contentで+Page.tsxで受け取れます。\n  };\n}\n\n\n```\n\n**+onBeforeRender.ts**\n\n```\n// /pages/some-page/+onBeforeRender.js\n \nexport function onBeforeRender() {\n  const someValue1 = /* ... */\n  const someValue2 = /* ... */\n  // pageContext.prop1 === someValue1\n  // pageContext.prop2 === someValue2\n  return {\n    pageContext: {\n      prop1: someValue1, //pageContext.prop1\n      prop2: someValue2 //pageContext.prop2で受け取れます\n    }\n  }\n}\n```\n\npageContext以外も渡せるよ〜ってところが違いなんですかね。（使い方をよくわかっていない）\n\nブログサイトのSSGするなら、あまり関係ない部分だと思ってもらっていいです。基本的には+data.tsを使いましょうで済む話です。\n\nで、+data.tsをどこで使うかと言ったら、ブログデータやらユーザデータやらがデータベースに入っている場合でしょうか。今回、リポジトリにダイレクトで突っ込んでいるので、そのあたりの技術は使いませんでした。\n\n##### +config.ts\n\nこれが、すごくわかりにくい。\n\ntitle, description, faviconなどのmetaタグ情報を入れたりできるが、OGPの情報(og:title)は入れられない。\n\n唯一、忘れないでほしいことは、pages/+config.tsに**prerender:true**の設定をしておくことだ。\n\nこれを入れないと、SSGではなく、SSRとなるらしい。SSRでも問題ない場合はそれでいいのだが今回はさくらのレンタルサーバーを使っているので、必ずtrueにする。\n\n設定の例はこんな感じだ。\n\n```\n// +config.ts\nimport vikeReact from \"vike-react/config\";\nimport { Layout } from \"./Layout\";\nimport { description, favicon, title } from \"../const/pageConstants\";\n\nexport default {\n  Layout,\n  lang: \"ja\",\n  extends: vikeReact,\n  prerender: true,\n  passToClient: [\"content\"],\n  favicon,\n  title,\n  description,\n};\n\n```\n\nLayoutは、最上位となるコンポーネントですべての子コンポーネントがこの最上位コンポーネント上にレンダリングされる。煩わしい表現だが、コードで見ると明らかである。\n\n```\n// Layout.tsx\nimport React from \"react\";\nimport type { PageContext } from \"vike/types\";\nimport \"../styles/index.css\";\n\nexport function Layout({\n  children,\n}: {\n  children: React.ReactNode;\n  pageContext: PageContext;\n}) {\n  return <React.StrictMode>{children}</React.StrictMode>;\n}\n\n```\n\n## 総括\n\nViteにvite-plugin-ssrを入れれば、すぐにSSGができるだろうと見積もっていて３人日もあれば終わるなと思っていたのが、Vikeを導入することになり、大幅にサイトの構成を変えることになった。\n\n実プロジェクトだと、本当に痛い目を見ていただろうが個人の趣味のサイトだから、対費用効果なんて関係ない。\n\nDevinやClineなんかの最新AIに頼っても見たが、全く違う路線に走ってしまう（暴走）傾向があり、そのくせ稼働分はしっかりお金を取ってくるというなんとも言葉にしがたい感覚である。\n\nDevinなどのAIかもしっかり仕様書を書いておければ、ある程度開発効率は上がるのだろうが、個人のサイトで仕様書なんか書きたくない。\n\nコードばっかり書いていた人間、コードで仕様を語る人間には、到底AIコーディングなんかは無理だろう（私もどちらかというとその傾向がある人間だが･･･）\n\n何が言いたいかって言うと、Devinを入れてすべて解決します。1人月分稼ぎますというのはAIって話題に乗っか解けば儲かるコンサルとAI使ってますというと安心できる経営者のまやかしでしか無い。\n\nと、妄想してみます。\n\nもちろん、複雑な業務ロジックもなく、ちょっとしたアプリを作るにはDevinやClineは有効であろうかとは思うが。それ以上のレベルを求めると、レビューと修正の無限ループが発生するので（その間のACUやTokenも消費する）結局は、人間が落とし所をつけてコーディングするしか無い。\n\nジュニアレベルのエンジニアは淘汰されて、代替される。（順序、分岐、反復が理解できたくらいの人）\n\nかといって、誰でもジュニア時代はあるわけで。\n\nどうするかといったら、**自分のWebサイトを作るのが一番手っ取り早い。**\n\n* 言語はどうする?(Java?Ruby?JavaScript)。\n* フレームワークはどうする?(Spring Boot?Ruby on Rails?React?)。\n* どのサーバーで動かす？（Azure?AWS?Netlify?CloudFrare?オンプレミス?)\n* CI/CDはどうする？(GitHub Actions?)\n* データベースは？（RDS?NoSQL?)\n* ORMは？\n* 予算は？\n\nなどなど。考えることはたくさんあります。\n\n他にも、構築していく過程でエラーやどうにも解決不可能な問題にぶち当たることでしょう。\n\n仕事では、あっさり解決困難なら回避しましょうとなりますが、ここは、個人の世界なので、無限に時間を投入できます（飽きたり、現状の技術では対処しようがないものに関してはもちろん回避賛成ですが）。納得の行くまで突き詰めると、意外なところで約に立つことがあったりします。\n\nそれに、そのプロセスこそが、あなたの技術力を磨く作業にほかならないです。（と勝手に信じてる）\n\nどうか、AIに操られてCMD+VとコンソールにEnterを押すだけの人間にはならないでください。\n\n少なくとも、エンジニアを名乗っているうちだけは。\n\n\n\nそうこうしているうちに、次のプロジェクトの話が来たようだ。\n\nなになに。\n\n次のプロジェクトでは、既存の契約システムをモダンなシステムに置き換える。\n\nMarkdownで仕様書を書き、Devinでコーディング、人間はレビューに徹すること。\n\nクライアントもAIを使った初のコーディングで、弊社に大変期待をしている。\n\n死んでも成功させること。\n\n\n\n線香の香りが漂っていた。\n",
    "title": "ブログ作るなら最初からSSGをしろ！",
    "date": "2025-08-03T09:51:00.000Z",
    "categories": [
      "技術"
    ],
    "tags": [
      "React"
    ],
    "coverImage": "https://himawari-blog-bucket.s3.ap-northeast-1.amazonaws.com/posts/images/9f3658b5-e4de-411c-9910-e0b4d976cd08-スクリーンショット 2025-07-27 16.35.01.jpg"
  },
  {
    "slug": "313bf706",
    "content": "\n## 文書データのベクトル変換\n\n### 1\\. ベクトル変換の目的\n\n文書データをベクトルに変換する目的は、自然言語のテキストを数値形式に変換し、機械学習アルゴリズムやデータ解析ツールで利用できるようにすることです。これにより、テキストの類似性の評価、分類、クラスタリングなどのタスクが可能になります。\n\n### 2\\. ベクトル変換の手法\n\n#### 2.1 Bag of Words（BoW）\n\n- **概要**: 文書内の単語の出現回数をカウントし、その頻度をベクトルとして表現する手法です。\n\n- **特徴**: 単語の順序を無視し、単語の出現回数のみを考慮します。\n\n- **例**:\n  - 文書 A: \"I love natural language processing\"\n\n  - 文書 B: \"I love programming\"\n\n  - 単語リスト: \\[I, love, natural, language, processing, programming\\]\n\n  - 文書 A のベクトル: \\[1, 1, 1, 1, 1, 0\\]\n\n  - 文書 B のベクトル: \\[1, 1, 0, 0, 0, 1\\]\n\n#### 2.2 TF-IDF（Term Frequency-Inverse Document Frequency）\n\n- **概要**: 単語の重要度を考慮した手法で、特定の文書内で頻出するが、他の文書にはあまり登場しない単語に高い重みを与えます。\n\n- **特徴**: 単語の頻度と逆文書頻度の積を使用して、重要度を計算します。\n\n- **例**:\n  - TF-IDF スコア = 単語の出現頻度 (TF) × 逆文書頻度 (IDF)  \n\n\n#### 2.3 Word2Vec\n\n- **概要**: ニューラルネットワークを使用して、単語を高次元のベクトル空間に埋め込む手法です。\n\n- **特徴**: 単語の意味的な類似性を反映し、ベクトル空間内で近接する単語が意味的にも類似します。\n\n- **例**:\n  - \"king\" - \"man\" + \"woman\" ≈ \"queen\"  \n\n\n#### 2.4 Doc2Vec\n\n- **概要**: 文書全体をベクトルに変換する手法で、Word2Vec の拡張版です。\n\n- **特徴**: 文書の意味的な類似性をベクトルで表現します。\n\n- **例**:\n  - 類似したトピックの文書は、ベクトル空間内で近くに配置されます。  \n\n\n#### 2.5 BERT（Bidirectional Encoder Representations from Transformers）\n\n- **概要**: トランスフォーマーモデルを使用して、文脈を考慮した単語ベクトルを生成します。\n\n- **特徴**: 双方向の文脈情報を考慮し、高度な意味理解が可能です。\n\n- **例**:\n  - \"bank\" (river) と \"bank\" (financial) が文脈に応じて異なるベクトルになります。  \n\n\n### 3\\. ベクトル変換の応用例\n\n- **テキスト分類**:\n\n  - 文書をカテゴリに分類するために使用されます。\n\n- **類似文書検索**:\n\n  - 似ている文書を検索するために使用されます。\n\n- **感情分析**:\n\n  - 文書の感情（ポジティブ、ネガティブ、中立）を分析するために使用されます。\n\n- **トピックモデリング**:\n  - 文書集合からトピックを抽出するために使用されます。  \n\n\n### 4\\. 注意点\n\n- **次元の呪い**:\n\n  - ベクトルの次元が高くなると計算量が増加し、効率が低下する可能性があります。\n\n- **データの前処理**:\n\n  - ノイズの除去や正規化が必要です。\n\n- **モデルの選択**:\n  - 使用する手法やモデルは、タスクやデータの特性に応じて適切に選択する必要があります。\n\n以上が、文書データのベクトル変換についての概要です。これらの手法を適用することで、テキストデータを数値化し、さまざまな解析や機械学習のタスクに利用できます。\n\nフーリエ変換は、時系列データや空間データを周波数領域に変換する数学的手法です。これにより、データ内の周期的な成分やパターンを解析することができます。以下に、フーリエ変換について詳しく説明します。\n\n## フーリエ変換とは？\n\n### 概要\n\nフーリエ変換は、信号や関数をその周波数成分に分解する手法です。具体的には、時間領域のデータを周波数領域に変換することで、データの周期性や周波数成分を明らかにします。\n\n### 基本概念\n\n#### 1\\. 時間領域と周波数領域\n\n- **時間領域**: 信号やデータが時間に対してどのように変化するかを示す表現。\n\n- **周波数領域**: 信号やデータをその周波数成分ごとに表現する表現。  \n\n\n#### 2. フーリエ変換の定義\n\nフーリエ変換は、連続時間信号 $f(t)$ を周波数領域に変換する操作で、以下のように定義されます：\n\n$$ F(\\omega) = \\int\\_{-\\infty}^{\\infty} f(t) e^{-i\\omega t} \\, dt $$\n\nここで、\n\n- $F(\\omega)$ は周波数 $\\omega$ におけるフーリエ変換の結果。\n- $f(t)$ は時間領域の信号。\n- $i$ は虚数単位。\n- $\\omega$ は角周波数。\n\n#### 3. 逆フーリエ変換\n\n逆フーリエ変換は、周波数領域のデータを再び時間領域に変換する操作です：\n\n$$ f(t) = \\frac{1}{2\\pi} \\int\\_{-\\infty}^{\\infty} F(\\omega) e^{i\\omega t} \\, d\\omega $$\n\n### フーリエ変換の種類\n\n1\\. **離散フーリエ変換（DFT）**\n\n- デジタル信号処理でよく使われる手法。有限長の離散データを周波数領域に変換します。\n\n- 計算コストが高いですが、FFT（高速フーリエ変換）アルゴリズムを使うことで効率的に計算できます\n\n2\\. **高速フーリエ変換（FFT）**\n\n- DFT を効率的に計算するアルゴリズムで、計算時間を大幅に短縮します。\n\n- デジタル信号処理や音声処理、画像処理などに広く利用されます。  \n\n\n### フーリエ変換の応用例\n\n1\\. **信号処理**  \n音声や画像、通信信号の周波数解析に使用されます。例えば、音声信号のスペクトル解析やノイズフィルタリングに用いられます。\n\n2\\. **画像処理**  \n画像のエッジ検出や圧縮、特徴抽出などに使用されます。例えば、JPEG 圧縮ではフーリエ変換を利用して周波数成分に分解し、不要な成分を除去します。\n\n3\\. **データ分析**  \n時系列データの周期性やトレンドを解析するために使用されます。例えば、金融データや気象データの周期的なパターンを検出するのに役立ちます。\n\n### フーリエ変換の利点と制約\n\n#### 利点\n\n- **周期成分の解析**: データ内の周期的な成分を明確にすることができます。\n\n- **フィルタリング**: 高周波成分や低周波成分を除去することで、データの平滑化やノイズ除去が可能です。  \n\n\n#### 制約\n\n- **時間情報の喪失**: フーリエ変換は周波数成分を解析しますが、元の信号の時間情報は失われます。\n\n- **非定常信号への適用**: 非定常信号（時間とともに特性が変わる信号）には適していない場合があります。この場合、ウェーブレット変換などの他の手法が使用されることがあります。  \n\n\n### フーリエ変換のまとめ\n\nフーリエ変換は、時系列データや空間データを周波数領域に変換する強力な手法です。これにより、データの周期性やパターンを解析し、信号処理や画像処理、データ分析などの幅広い分野で応用されています。しかし、時間情報の喪失や非定常信号への適用には制約があるため、適切な状況で使用することが重要です。\n\nベクトル変換した文書データをフーリエ変換すると、文書内の特徴が周波数領域で表現されるようになります。これは、文書データの周期性やパターンを解析するために役立ちます。具体的には以下のような変化や利点があります。\n\n### ステップバイステップの変換プロセス\n\n1\\. **文書データのベクトル化**\n\n- 文書を数値ベクトルに変換するための方法として、Word2Vec、TF-IDF、Doc2Vec、BERT などの手法を使用します。\n\n- 各単語または文書が数値ベクトルに変換されます。このベクトルは通常、高次元空間内の点を表します。\n\n2\\. **フーリエ変換の適用**:\n\n- 得られたベクトルデータに対して、フーリエ変換（Fourier Transform）を適用します。フーリエ変換は、時間領域のデータ（この場合はベクトルデータ）を周波数領域のデータに変換する手法です。\n\n- フーリエ変換を適用することで、文書データ内の隠れた周期性やパターンを周波数成分として表現できます。\n\n### フーリエ変換の効果と利点\n\n1\\. **周期的なパターンの検出**:  \nフーリエ変換により、文書内の周期的なパターンや繰り返しの特徴を識別することができます。例えば、特定のトピックが定期的に現れる場合、その周期性が明らかになります。\n\n2\\. **ノイズの除去と平滑化**:  \n周波数領域でデータを解析することで、低周波成分を抽出し、高周波成分を除去することで、データの平滑化やノイズの除去が可能になります。\n\n3\\. **特徴抽出と次元削減**:  \n周波数成分を解析することで、文書データの重要な特徴を抽出し、次元削減を行うことができます。これにより、データの圧縮や効率的な処理が可能になります。\n\n### 実用例\n\n- **テキスト分析**:\n\n  - テキストデータの周期性やトレンドを分析するために使用できます。例えば、ニュース記事のトピック分析やソーシャルメディアの投稿のトレンド解析に役立ちます。\n\n- **自然言語処理（NLP）**:\n  - ベクトル化した文書データのフーリエ変換を用いて、テキストの特徴抽出や分類モデルの前処理として利用できます。\n\n### 注意点\n\n- **解釈の難しさ**:\n\n  - フーリエ変換後のデータは周波数領域の情報を持つため、元の文書データとの直接的な対応関係がわかりにくくなることがあります。\n\n- **高次元データの処理**:\n  - 文書ベクトルは通常高次元であるため、フーリエ変換を適用する際に計算量が増えることがあります。\n\n### まとめ\n\nベクトル変換した文書データをフーリエ変換することで、文書内の周期的なパターンや特徴を周波数領域で解析することができます。これにより、テキストデータの特徴抽出やノイズの除去、次元削減が可能になります。ただし、周波数領域でのデータの解釈には注意が必要です。\n",
    "title": "【AIに聞いてみた】ベクトル変換した文書データをフーリエ変換するとどうなりますか？",
    "date": "2024-07-14T00:00:00.000Z",
    "categories": [
      "技術"
    ],
    "tags": [
      "フーリエ変換",
      "ベクトル変換",
      "機械学習"
    ],
    "coverImage": "https://dq7c5b6uxkdk2.cloudfront.net/posts/images/f8751740-e645-4e79-ab58-4066bcea9545.webp"
  },
  {
    "slug": "5d99068a",
    "content": "\n## 概要\n\n今回は、AWS Lambda を利用して楽天証券の Web ページから時価総額と評価損益のスクショを撮り、LINE で送信する方法を紹介します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/スクリーンショット-2024-06-23-16.53.47-1024x720.png)\n\n## 前提\n\n- 環境\n\n  - MacBookAir(macOS 14.4, Apple Sillicon)\n\n- Docker 導入済み\n\n- AWS CLI のセットアップ済み\n\n- Python 3.12\n\n## 修正済みのソースを見たい方はこちらから。\n\n[https://github.com/himawari-aerobytes/scraping-rakuten-sec/tree/main](https://github.com/himawari-aerobytes/scraping-rakuten-sec/tree/main)\n\n## ECR のイメージから Lambda 関数を作成\n\nSelenium は Web ブラウザの操作を自動化するフレームワークです。[https://qiita.com/Chanmoro/items/9a3c86bb465c1cce738a](https://qiita.com/Chanmoro/items/9a3c86bb465c1cce738a)\n\n今回は、Selenium を利用して Chrome を操作して楽天証券の画面のスクショを撮ります。\n\nSelenium の利用には、Chrome のバイナリが必要になりますが、AWS Lambda では Chrome のバイナリがデフォルトでは使えません。Chrome のバイナリは 100MB 近くの容量が必要となります。しかし、zip ファイルでアップロードできる Lambda の容量は 250MB が上限です。Python の諸々のライブラリを含めると、容量制限に引っかかってしまいます。\n\n250MB を超える場合は、ECR で docker イメージを利用して Lambda 関数を構築します。\n\n## ECR リポジトリの準備\n\nまずは、AWS コンソールの ECR のページに飛びリポジトリの作成を押下します\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/ECR1-1024x557.jpg)\n\nリポジトリ名に任意の名前（今回は selenium)を入力し｢リポジトリを作成｣を押下します\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/ECR2-1-572x1024.jpg)\n\n以下のような画面になれば成功です。ここで表示されている URI は以降使用するのでメモをしておいてください。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/ECR3-1024x557.jpg)\n\n## Docker イメージの push\n\nこの章では先程作成した ECR リポジトリに Docker イメージを push します。\n\n### Dockerfile の作成\n\nSelenium や chromedriver などを導入したイメージを作成するために Dockerfile を作成します。\n\n新規フォルダを作成し、Dockerfile を作成します。\n\n開発環境が環境が Mac ではない場合、--platform=linux/amd64 の記述は削除してください。\n\nDockerfile\n\n```\nFROM --platform=linux/amd64 public.ecr.aws/lambda/python@sha256:fb31ca51357519a48a90f01a76e9d550778ecfcbe8d92dd832ec49b6672e387c as build\nRUN dnf install -y unzip && \\\n    curl -Lo \"/tmp/chromedriver-linux64.zip\" \"https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/119.0.6045.105/linux64/chromedriver-linux64.zip\" && \\\n    curl -Lo \"/tmp/chrome-linux64.zip\" \"https://edgedl.me.gvt1.com/edgedl/chrome/chrome-for-testing/119.0.6045.105/linux64/chrome-linux64.zip\" && \\\n    unzip /tmp/chromedriver-linux64.zip -d /opt/ && \\\n    unzip /tmp/chrome-linux64.zip -d /opt/\n\nFROM --platform=linux/amd64 public.ecr.aws/lambda/python@sha256:fb31ca51357519a48a90f01a76e9d550778ecfcbe8d92dd832ec49b6672e387c\nRUN dnf install -y atk cups-libs gtk3 libXcomposite alsa-lib \\\n    libXcursor libXdamage libXext libXi libXrandr libXScrnSaver \\\n    libXtst pango at-spi2-atk libXt xorg-x11-server-Xvfb \\\n    xorg-x11-xauth dbus-glib dbus-glib-devel nss mesa-libgbm\nRUN pip install selenium==4.15.2\nRUN pip install python-dotenv\nRUN pip install boto3\nRUN pip install requests\nRUN dnf -y install langpacks-ja\nRUN dnf -y install ipa-gothic-fonts ipa-mincho-fonts ipa-pgothic-fonts ipa-pmincho-fonts\nCOPY --from=build /opt/chrome-linux64 /opt/chrome\nCOPY --from=build /opt/chromedriver-linux64 /opt/\nCOPY lambda/lambda_function.py ./\nCMD [ \"lambda_function.lambda_handler\" ]\n```\n\n### lambda_function.py の作成\n\nLambda で実行する関数を書きます。ファイル名は lambda_function.py と必ずしてください。\n\n後述しますが、Lambda の環境変数として以下を設定しています。\n\n| キー                      | 値                                              |\n| ------------------------- | ----------------------------------------------- |\n| BUCKET_NAME               | 画像を保存する S3 バケット名                    |\n| ID                        | 楽天証券の ID                                   |\n| LINE_CHANNEL_ACCESS_TOKEN | LINE Messaging API のチャンネルアクセストークン |\n| PASS                      | 楽天証券のパスワード                            |\n| USER_ID                   | LINE のユーザ ID（送信先のユーザ ID）           |\n\nlambda_function.py\n\n```\nimport os\nfrom dotenv import load_dotenv\nfrom selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.chrome.service import Service\nfrom selenium.webdriver.chrome.options import Options\nimport time\nimport datetime\nimport boto3\nfrom botocore.exceptions import NoCredentialsError, PartialCredentialsError\nimport requests\nimport json\n\n# 現在時刻の取得\ndef getNowTimeString():\n    # 時間の設定\n    t_delta = datetime.timedelta(hours=9)\n    JST = datetime.timezone(t_delta, 'JST')\n    now = datetime.datetime.now(JST)\n    return now.strftime(\"%Y%m%d%H%M%S\")\n\ndef upload_to_s3(local_path, bucket_name, object_key):\n    s3_client = boto3.client('s3')\n    s3_client.upload_file(local_path, bucket_name, object_key)\n    return f\"https://{bucket_name}.s3.amazonaws.com/{object_key}\"\n\ndef generate_presigned_url(bucket_name, object_key, expiration=3600):\n    s3_client = boto3.client('s3')\n    try:\n        response = s3_client.generate_presigned_url('get_object',\n                                                    Params={'Bucket': bucket_name,\n                                                            'Key': object_key},\n                                                    ExpiresIn=expiration)\n    except (NoCredentialsError, PartialCredentialsError) as e:\n        print(\"Credentials not available: \", e)\n        return None\n    return response\n\ndef send_LINE(now,local_path):\n    line_channel_access_token = os.environ.get(\"LINE_CHANNEL_ACCESS_TOKEN\")\n    user_id = os.environ.get(\"USER_ID\")\n    bucket_name = os.environ.get(\"BUCKET_NAME\")\n    object_key = now+'_screenshot.png'\n\n    # 画像をS3にアップロードしてURLを取得\n    upload_to_s3(local_path, bucket_name, object_key)\n    uploaded_image_url = generate_presigned_url(bucket_name, object_key)\n    headers = {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\": f\"Bearer {line_channel_access_token}\"\n    }\n\n    data = {\n        \"to\": user_id,\n        \"messages\": [\n            {\n                \"type\": \"image\",\n                \"originalContentUrl\": uploaded_image_url,\n                \"previewImageUrl\": uploaded_image_url\n            }\n        ]\n    }\n\n    response = requests.post(\n        \"https://api.line.me/v2/bot/message/push\",\n        headers=headers,\n        data=json.dumps(data)\n    )\n\n    return {\n        'statusCode': response.status_code,\n        'body': response.text\n    }\n\ndef lambda_handler(event,context):\n\n    load_dotenv()\n\n    # Optionの設定\n    chrome_options = Options()\n    chrome_options.add_argument(\"--headless\")\n    chrome_options.add_argument(\"--no-sandbox\")\n    chrome_options.add_argument(\"--disable-dev-shm-usage\")\n    chrome_options.add_argument(\"--single-process\")\n    chrome_options.add_argument(\"--disable-gpu\")\n    chrome_options.add_argument(\"--window-size=1280x1696\")\n    chrome_options.add_argument(\"--user-data-dir=/tmp/user-data\")\n    chrome_options.add_argument(\"--data-path=/tmp/data-path\")\n    chrome_options.add_argument(\"--disk-cache-dir=/tmp/cache-dir\")\n    chrome_options.add_argument(\"--homedir=/tmp\")\n    chrome_options.binary_location = \"/opt/chrome/chrome\"\n\n    driver = webdriver.Chrome(options=chrome_options, service=Service(\"/opt/chromedriver\"))\n\n    driver.get('https://www.rakuten-sec.co.jp/ITS/V_ACT_Login.html') #特定のURLへ移動\n    time.sleep(1)\n\n    # ログイン処理\n    loginId = driver.find_element(By.NAME, 'loginid')\n    password = driver.find_element(By.NAME, 'passwd')\n\n    loginId.clear()\n    password.clear()\n\n    loginId.send_keys(os.environ.get(\"ID\"))\n    password.send_keys(os.environ.get(\"PASS\"))\n\n    loginId.submit()\n\n    time.sleep(5)\n    allBreakdown=driver.find_element(By.ID,'homeAssetsTrigger')\n    allBreakdown.click()\n    time.sleep(5)\n    portfolio = driver.find_element(By.ID, 'balance_data_actual_data')\n    # 画面最大化\n    driver.maximize_window()\n\n    now = getNowTimeString()\n\n    time.sleep(5)\n    print(portfolio.location)\n    local_path= '/tmp/'+now+'_screenshot.png'\n    portfolio.screenshot(local_path)\n    driver.quit()\n\n    # LINE送信処理\n    return send_LINE(now,local_path)\n```\n\n### Docker イメージの作成\n\nDockerfile と lamda_function.py を作成したフォルダ内で以下のコマンドを実行します。\n\n```\n$ docker build -t selenium .\n```\n\nイメージを push するために、タグをつけます。（URI は AWS ECR リポジトリ一覧に表示されていた URI に置き換えてください。）\n\n```\n$ docker tag selenium:latest 123456789012.dkr.ecr.ap-northeast-1.amazonaws.com/selenium:latest\n```\n\nECR にログインするために、以下のコマンドを実行します（URI は AWS ECR リポジトリ一覧に表示されていた URI に置き換えてください。）\n\n```\n$ aws ecr get-login-password  | docker login --username AWS --password-stdin 123456789012.dkr.ecr.ap-northeast-1.amazonaws.com\n```\n\nイメージを ECR に push するために以下のコマンドを実行します。（URI は Amazon ECR リポジトリ一覧に表示されていた URI に置き換えてください。）\n\n```\n$ docker push 123456789012.dkr.ecr.ap-northeast-1.amazonaws.com/selenium:latest\n```\n\npush が完了すると、ECR リポジトリ内に latest タグの付いたイメージが追加されていることが確認できます。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/ECR4-1024x558.jpg)\n\n## Lambda 関数の作成\n\nAWS コンソールの Lambda のページに飛びます。左上の｢関数の作成｣を押下します\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/Lambda1-1024x558.jpg)\n\n｢コンテナイメージ｣を選択します。\n\n｢イメージの作成｣から先ほど作成した ECR の URI をペーストします。\n\nその後、Lambda から S3 にアップロードする権限を付与するために、IAM コンソールから IAM ロールを作成します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/Lambda2-736x1024.jpg)\n\n｢サービスまたはユースケース｣で、｢Lambda｣し、｢次へ｣を選択します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/Lambda3-1024x1017.jpg)\n\n｢AmazonS3FullAccess｣を許可ポリシーに追加し、｢次へ｣を選択します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/Lambda4-1024x554.jpg)\n\nロール名に、role-selenium-lambda(任意の名前）を入力し、｢ロールの作成｣を押下します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/Lambda5-728x1024.jpg)\n\nLambda のページに戻り、｢既存のロール｣に先ほど作成したロールを設定し、｢関数の作成｣を押下します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/Lambda6-1024x556.jpg)\n\n関数の作成が完了すると｢正常に作成しました｣と表示されます。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/Lambda7-1024x556.jpg)\n\n設定タブから｢メモリ｣を 512MB、｢タイムアウト｣を 2 分 0 秒に設定します\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/Lambda8-1024x557.jpg)\n\n環境変数に以下を設定します。\n\n| キー                      | 値                                              |\n| ------------------------- | ----------------------------------------------- |\n| BUCKET_NAME               | 画像を保存する S3 バケット名                    |\n| ID                        | 楽天証券の ID                                   |\n| LINE_CHANNEL_ACCESS_TOKEN | LINE Messaging API のチャンネルアクセストークン |\n| PASS                      | 楽天証券のパスワード                            |\n| USER_ID                   | LINE のユーザ ID（送信先のユーザ ID）           |\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/Lambda9-1024x557.jpg)\n\n### LINE Messaging API と S3 バケット名の取得\n\nLINE Developers のページに行きます。[https://developers.line.biz/console/](https://developers.line.biz/console/)\n\n｢プロバイダー｣から｢作成｣を選択します\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/LINE1-1024x563.jpg)\n\n｢プロバイダー名｣に scraping-rakutensec-test(任意の名前）を入力します。\n\n｢作成｣を押下します\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/LINE2-1024x556.jpg)\n\n｢Messaging API｣を選択します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/LINE3-1024x558.jpg)\n\nチャネル名、チャネル説明、大業種、小業種、メールアドレスを入力します。\n\n｢作成｣を押下します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/LINE4-444x1024.jpg)\n\n｢チャネルシークレット(環境変数の LINE_CHANNEL_ACCESS_TOKEN)｣｢あなたのユーザ ID(環境変数の USER_ID)｣を確認し、Lambda の環境変数に登録します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/LINE5-1024x557.png)\n\n｢Messaging API 設定｣のタブから｢QR コード｣を読み取り、LINE Bot を友だち登録します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/LINE6-2-1024x600.jpg)\n\nAWS コンソールから、S3 のページに飛びます。\n\n｢バケットを作成｣を押下します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/S31-1024x528.jpg)\n\n｢バケット名｣に、名前を入力します。こちらが環境変数 BUCKET_NAME になります。Lambda の環境変数にこちらも登録します。\n\n｢バケットを作成｣を押下します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/S32-1-396x1024.jpg)\n\n以上で、手順は完了です。\n\n## Lambda でテストを実行\n\nLambda で Selenium のページに行き、｢テスト｣を実行すると LINE で画像が送られてきます。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/Lambda10-1024x590.jpg)\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/スクリーンショット-2024-06-29-17.09.02.png)\n",
    "title": "AWS Lambdaで楽天証券の評価損益･時価総額のスクショを送る(Python 3.11)",
    "date": "2024-06-28T00:00:00.000Z",
    "categories": [
      "技術"
    ],
    "tags": [
      "プログラミング",
      "AWS",
      "Lambda"
    ],
    "coverImage": "https://dq7c5b6uxkdk2.cloudfront.net/posts/images/スクリーンショット-2024-06-29-17.07.48.png"
  },
  {
    "slug": "460d77e4",
    "content": "\n今回は、AWS Lambda でハンドラーが認識されないときの対処方法をご紹介します。\n\n## 前提\n\n- macOS 14.4(M2 MacBookAir)\n\n- AWS CLI 環境\n\n## 再現手順\n\n- 1\\. 作成したコードを、Zip 化する\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/スクリーンショット-2024-06-22-14.25.14.png)\n\n- 2\\. Zip のあるフォルダで以下を実行\n\n`aws s3 cp ./Zip化したコード s3://バケット名`\n\n上記のコマンドで、s3 へ対象コードをアップロードします。  \nバケットは事前に作成しておいてください。\n\n- 3\\. Lambda 関数を作成する\n\n```\naws lambda create-function \\\n    --function-name Lambda関数の名前 \\\n    --runtime ランタイム(python3.11など) \\\n    --code S3Bucket=バケット名,S3Key=Zipのファイル名 \\\n    --handler lambda_function.lambda_handler \\\n    --role ロールのARN\n```\n\n- 4\\. AWS のコンソールに行き Lambda のページを選択します。\n\n- 5\\. Lambda のページから作成した、関数を選択します。\n\n- 6\\. テストタブからテストを選択し、実行します。\n\n以下のエラーが発生しました。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/スクリーンショット-2024-06-22-14.33.22-1024x172.png)\n\n## 解決手順\n\nZip 化する際に、OS の GUI から圧縮を行う(手順 1)を行うと lambda_function を見つけられずエラーとなってしまうので、ターミナルから zip コマンドを利用して zip ファイルを作成します\n\n```\nzip -r scraping-rakuten-sec.zip *\n```\n\n上記で zip 化したコマンドを手順２の方法で s3 へ転送します。\n\nコードソースから Amazon S3 の場所を選択し、指示に従って、zip 化したファイルの s3 リンクを貼り付けて Lambda 関数を更新します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/スクリーンショット-2024-06-22-14.40.40-1024x210.png)\n\n## まとめ\n\nzip 化するときは、OS の圧縮機能を使わずに、zip コマンドを利用して zip 化しましょう。\n",
    "title": "Lambdaでハンドラーが認識されない",
    "date": "2024-06-22T00:00:00.000Z",
    "categories": [
      "技術"
    ],
    "tags": [
      "技術",
      "Lambda"
    ],
    "coverImage": "https://dq7c5b6uxkdk2.cloudfront.net/posts/images/Arch_AWS-Lambda_64@5x.png"
  },
  {
    "slug": "55b26f54",
    "content": "\n今回は、Ruby on Rails の Devise を使って、Microsoft Entra ID でログインできるようにします。\n\n##\n\n前提\n\n### [](https://qiita.com/himawari_project/items/8ec59a8cb6d2abce4221#%E6%9D%A1%E4%BB%B6)条件\n\n- Azure アカウントを作成済みである\n\n- Azure Portal へログインできる\n\n### 環境\n\n- ruby 3.3.1\n\n- Rails 7.1.3.4\n\n## Microsoft Entra ID(旧 Azure AD)とは？\n\nクラウドベースの ID 管理とアクセス管理のサービスを提供します。(Microsoft 認定資格試験テキスト AZ900:Micosoft Azure Fundamentals 改訂第２版　須屋聡史/富岡洋/佐藤雅信）  \n今回は、認証･認可サーバを Entra ID に担わせて Rails 側でその情報を受け取る実装にしていきます。\n\n## プロジェクトの作成\n\n- プロジェクトの作成をします  \n   `$ rails new entraid`(entraid)は適当で OK\n\n- `$ cd entraid`でプロジェクトフォルダに移動します\n\n## Gem の追加\n\nGemfile に必要な Gem を追加します\n\nGemfile\n\n```\ngem 'devise'\ngem \"omniauth\"\ngem \"omniauth-rails_csrf_protection\"\ngem 'omniauth-azure-activedirectory-v2'\ngem 'dotenv-rails', groups: [:development, :test]\n```\n\n- `$ bundle install`を実行します\n\n## Devise のセットアップ\n\nDevise をセットアップします\n\n```\n$ rails generate devise:install\n$ rails generate devise User\n$ rails db:migrate\n```\n\n### Omniauth の設定を追加する\n\nconfig/initializers/devise.rb ファイルに、Azure AD の設定を追加します。\n\nconfig/initializers/devise.rb\n\n```\nDevise.setup do |config|\n  # 他の設定\n  config.omniauth :azure_activedirectory_v2,\n                  client_id:     ENV['AZURE_CLIENT_ID'],\n                  client_secret: ENV['AZURE_CLIENT_SECRET'],\n                  tenant_id:     ENV['AZURE_TENANT_ID']\nend\n```\n\n## User モデルに Omniauth の設定を追加する\n\napp/models/user.rb ファイルに以下を追加します。\n\napp/models/user.rb\n\n```\nclass User < ApplicationRecord\n  devise :database_authenticatable, :registerable,\n         :recoverable, :rememberable, :validatable, :omniauthable, omniauth_providers: [:azure_activedirectory_v2]\n\n  def self.from_omniauth(auth)\n    where(provider: auth.provider, uid: auth.uid).first_or_create do |user|\n      user.email = auth.info.email\n      user.password = Devise.friendly_token[0, 20]\n      # ユーザーの追加情報を必要に応じて設定\n    end\n  end\nend\n```\n\n## コントローラに Omniauth のコールバックを追加する\n\napp/controllers/users/omniauth_callbacks_controller.rb ファイルを作成し、以下を追加します。\n\napp/controllers/users/omniauth_callbacks_controller.rb\n\n```\nclass Users::OmniauthCallbacksController < Devise::OmniauthCallbacksController\n  def azure_activedirectory_v2\n    @user = User.from_omniauth(request.env[\"omniauth.auth\"])\n\n    if @user.persisted?\n      sign_in_and_redirect @user, event: :authentication\n      set_flash_message(:notice, :success, kind: \"Azure\") if is_navigational_format?\n    else\n      session[\"devise.azure_data\"] = request.env[\"omniauth.auth\"]\n      redirect_to new_user_registration_url\n    end\n  end\n\n  def failure\n    redirect_to root_path\n  end\nend\n\n```\n\n## ルーティングの設定をする\n\nconfig/routes.rb ファイルに以下を追記します。\n\nconfig/routes.rb\n\n```\nRails.application.routes.draw do\n  devise_for :users, controllers: {\n    omniauth_callbacks: 'users/omniauth_callbacks'\n  }\n\n  # 他のルート\n  # ルートパスの設定\n  root to: 'home#index'\nend\n```\n\n## ホームページの作成\n\nホームページのコントローラとアクションを作成します。\n\nbash\n\n```\n$ rails generate controller home index\n```\n\nこれで、app/controllers/home_controller.rb と app/views/home/index.html.erb が作成されます。\n\n## ビューをカスタマイズする\n\nログインボタンを追加するために、ビューをカスタマイズします。例えば、app/views/devise/sessions/new.html.erb に以下を追加します。\n\napp/views/devise/sessions/new.html.erb\n\n```\n<h2>Log in</h2>\n<%= render \"devise/shared/links\" %>\n```\n\n## Azure ポータルでアプリケーションを登録する\n\n1. Azure ポータルにサインインし、「Azure Entra ID」に移動します。  \n   ![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/EntraID1.png)  \n   [](https://camo.qiitausercontent.com/b0f2098fea31d927464be63b143921ec84ea498e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3539363633302f36353130633766322d326230642d613063382d333233632d6535363437373537643738372e706e67)\n\n2. 「アプリの登録」をクリックし、新しい登録を作成します。  \n   ![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/EntraID2.png)  \n   [](https://camo.qiitausercontent.com/c4b1ed75c47c85cea79e4629547f0580cd357b3a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3539363633302f65623262656636642d653565662d303935332d393336622d3731356466656333366131622e706e67)\n\n3. 新規登録をクリックします  \n   ![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/EntraID3.png)  \n   [](https://camo.qiitausercontent.com/ef9fca10f40a913c937af95b91820683439ab681/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3539363633302f32623137663434642d633232362d613134332d663933622d6338343737643331313635332e706e67)\n\n4. 必要な情報を入力し、リダイレクト URI として[http://localhost:3000/users/auth/azure_activedirectory_v2/callback を追加します。](http://localhost:3000/users/auth/azure_activedirectory_v2/callback%E3%82%92%E8%BF%BD%E5%8A%A0%E3%81%97%E3%81%BE%E3%81%99%E3%80%82)  \n   ![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/EntraID4.png)  \n   [](https://camo.qiitausercontent.com/837a3e8885223639cb69bbc1af3f8acf2621de52/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3539363633302f33656533393037342d373763332d663063642d393932342d3561646232613463633135642e706e67)\n\n5. 「証明書とシークレット」セクションで、新しいクライアントシークレットを作成します。このシークレットは後で使います。  \n   [](https://camo.qiitausercontent.com/027a94fb40ef7d50a53f9c925cee8097021744a8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3539363633302f33633036636162382d303161362d323866372d663131302d6539303962666138316661352e706e67)![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/EntraID5.png)  \n   ![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/EntraID6.png)  \n   ![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/EntraID7.png)  \n   ![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/EntraID8.png)  \n   [](https://camo.qiitausercontent.com/8bd6cf67ff864de6a8d2c9d5430d0007322c40e4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3539363633302f30656133353436612d323538352d336538662d363531382d6233356663613239356330352e706e67)![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/EntraID9.png)  \n   [](https://camo.qiitausercontent.com/35d4a50daa2eba81bf09adb8f9d827c995498b5b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3539363633302f30623939633666662d626539622d396331312d666534372d3735613361323831353235632e706e67)  \n   [](https://camo.qiitausercontent.com/b3abe743904638ccc31847bb36b93f94b3a195d1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3539363633302f35623231353431612d653431342d393238632d326434352d3466653161346239626534652e706e67)\n\n6. .env ファイルを作成します。  \n   AZURE_CLIENT_ID,AZURE_TENANT_ID は、以下の画像の欄からコピーします。  \n   AZURE_CLIENT_SEACRET は手順５で取得したシークレット値を利用します。\n   [](https://camo.qiitausercontent.com/7c1fa8b9b01a479018c03984b0286c44d1bb74e8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e61702d6e6f727468656173742d312e616d617a6f6e6177732e636f6d2f302f3539363633302f38656338663462362d666232612d653731652d383432342d3435393638333461636666312e706e67)\n\n.env\n\n```\nAZURE_CLIENT_ID=your_client_id\nAZURE_CLIENT_SECRET=your_client_secret\nAZURE_TENANT_ID=your_tenant_id\n```\n\n7.Rails を再起動します。\n\nbash\n\n```\n$ rails s\n```\n\n## [](https://qiita.com/himawari_project/items/8ec59a8cb6d2abce4221#azure%E3%83%9D%E3%83%BC%E3%82%BF%E3%83%AB%E3%81%A7%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E7%99%BB%E9%8C%B2%E3%81%99%E3%82%8B)\n\n## [](https://qiita.com/himawari_project/items/8ec59a8cb6d2abce4221#%E3%83%93%E3%83%A5%E3%83%BC%E3%82%92%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA%E3%81%99%E3%82%8B)\n\n## [](https://qiita.com/himawari_project/items/8ec59a8cb6d2abce4221#%E3%83%AB%E3%83%BC%E3%83%86%E3%82%A3%E3%83%B3%E3%82%B0%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%82%92%E3%81%99%E3%82%8B)\n",
    "title": "Rails7でMicrosoft Entra IDを使ったログインを実装する",
    "date": "2024-06-21T00:00:00.000Z",
    "categories": [
      "技術"
    ],
    "tags": [
      "Ruby on Rails7",
      "EntraID"
    ],
    "coverImage": "https://dq7c5b6uxkdk2.cloudfront.net/posts/images/Microsoft_Azure.svg_.png"
  },
  {
    "slug": "baf54e38",
    "content": "\npyenv で python をインストールしたときに、インストールに失敗していたので、原因調査をしたので記事にします。\n\n## 前提\n\n- MacBook Air(M2 プロセッサ)\n\n- anyenv で pyenv をインストール\n\n- brew を利用（PATH が通っている)\n\n## エラー\n\nanyenv で pyenv をインストールしたあと、pyenv install 3.11.8 を実行すると以下のエラーが発生してしまい、インストールができませんでした。\n\n```\nld: symbol(s) not found for architecture arm64\nld: symbol(s) not found for architecture arm64\nclang: clang: error: error: linker command failed with exit code 1 (use -v to see invocation)\n```\n\n## 原因調査\n\n1. brew update, upgrade で更新プログラムがないか。  \n   → こちらは更新したが、変化なし。\n\n2. Apple Silicon に対応した、brew が入っているか。  \n   →Intel 系のインストーラとの違いがなかった。\n\n3. pyenv は、anyenv からインストールされているものが利用されているか  \n   （brew 経由でインストールされたものが利用されていないか  \n   → こちらは、anyenv から pyenv をアンインストールしたところで、pyenv コマンドが動いたため、brew でインストールしたものが使われてそう。(ここが怪しい。）\n\n4. MacBook のデータ移行(Intel プロセッサ）を行った影響がないか  \n   → こちらも、brew 関係でエラーを発生させそう。\n\nどうやら 3 番,4 番が怪しそうという結果になりました。\n\n## 解決策\n\n- pyenv の削除  \n   brew でインストールしたものを削除します。  \n   `$ brew uninstall pyenv`\n\n- anyenv の削除  \n   anyenv をアンインストールします。  \n   `$ brew uninstall anyenv`\n\n- brew の削除  \n   brew を削除します  \n   `$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)\"`\n\n- brew をインストールします  \n   `$ /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"`\n\n- anyenv をインストールします  \n   `$ brew install anyenv`\n\n- pyenv をインストールします  \n   `$ anyenv install pyenv`\n\n- python3.11.8 を試しにインストールします。  \n   `$ pyenv install 3.11.8`\n\n上記で完了ですお疲れ様です。  \nIntelMac から Apple Silicon へ移行して、pyenv で新たにインストールできなくなった人は試してみるとよいかと思います。\n",
    "title": "pyenvでinstallができない",
    "date": "2024-03-25T00:00:00.000Z",
    "categories": [
      "技術"
    ],
    "tags": [
      "Python",
      "プログラミング"
    ],
    "coverImage": "https://dq7c5b6uxkdk2.cloudfront.net/posts/images/スクリーンショット-2024-03-25-14.01.43.png"
  },
  {
    "slug": "4e7fd8ea",
    "content": "\n## コスト効率と手軽さ\n\nGitHub Copilot は、プログラミングの未来を担う画期的なツールです。このツールは、開発者がコードを生成する際に革新的な支援を提供し、プログラミングの効率性を飛躍的に向上させます。10 ドル（約 1300 円）という手頃な価格で利用できるこのツールは、コスト効率の面でも優れています。\n\n## コード生成の簡便さ\n\nCopilot の最大の特徴は、コメントを書いて tab キーを押すだけで、実際のコードを生成できることです。この機能は、AI 技術の最新の進歩を活用しており、開発者が手動でコードを記述する手間を省きます。これにより、開発プロセスが迅速化され、生産性が向上します。\n\n## コードの保守性と理解の促進\n\nCopilot はコードを生成する際に、コメントを書きます。これによって生成されたコードの意図や目的が明確になります。その結果、コードの保守性が向上し、将来の変更や追加が容易になります。この高い保守性は、プロジェクトの長期的な成功に不可欠です。\n\n## 懸念点:コードのアップロード\n\nCopilot の利用にはいくつかの懸念点もあります。その 1 つが、コードがアップロードされてしまう可能性です。Copilot は、開発者のコードやコメントを学習するために、GitHub 上のリポジトリからデータを収集します。このため、開発者がコードを生成する際には、機密情報やプライバシーに関わるコードがアップロードされる可能性があります。\n\nまた、Copilot が提供するコードは、一部のプログラミング言語やフレームワークに特化しており、すべての状況に対応できるわけではありません。特定のプロジェクトや環境に適したコードを生成するためには、開発者が追加の調整や手動の介入が必要になることがあります。\n\nGitHub Copilot は、プログラミングの未来に向けた大きな一歩ですが、その利用には慎重な検討が必要です。開発者は、Copilot が提供するコードを適切に評価し、自身のプロジェクトに適した方法で活用する必要があります。また、機密情報やプライバシーに関わるコードがアップロードされないよう、注意を払う必要があります。\n\n※上記の記事は、ChatGPT3.5 で生成された記事です。内容に誤りがある場合はお知らせください。\n",
    "title": "GitHub Copilot: コード生成の未来への一歩",
    "date": "2024-03-08T00:00:00.000Z",
    "categories": [
      "技術"
    ],
    "tags": [
      "AI",
      "GitHub Copilot"
    ],
    "coverImage": "https://dq7c5b6uxkdk2.cloudfront.net/posts/images/IMG_5543.jpeg"
  },
  {
    "slug": "741b1051",
    "content": "\n## JAL ツアープレミアムに加入する\n\nJAL ツアープレミアムというプログラムに加入すると、年会費 2200 円で区間マイルを 100%貯めることができます。これは、普段の飛行機利用だけでなく、ショッピングでもマイルを効率的に貯めることができる魅力的なプランです。\n\nJAL（日本航空）のマイルを貯める方法は、飛行機に搭乗するだけではありません。実は、ショッピングを通じてもマイルを貯めることができます。以下では、JAL マイルを効率的に貯める方法について詳しく解説します。\n\n## ショッピングマイル・プレミアムに加入する\n\nさらに、ショッピングマイル・プレミアムに加入すると、年会費 4950 円でマイル還元率を通常の 2 倍にすることができます（通常 0.5%〜1.0%）。これにより、日常の買い物でも効率よくマイルを貯めることができます。\n\n## JAL CLUB EST に入会する\n\n特に 20 代の方におすすめなのが、JAL CLUB EST への入会です。年会費 5500 円を支払うことで、ツアープレミアムとショッピングマイル・プレミアムが無料で付いてきます。これにより、若い世代でも手軽にマイルを貯めることができるため、積極的な参加が可能です。\n\nJAL マイルを貯めるためには、飛行機に搭乗するだけでなく、上記のようなプログラムやサービスを上手に利用することが重要です。特に、JAL ツアープレミアムやショッピングマイル・プレミアム、JAL CLUB EST のような会員制プログラムは、貯めたマイルを効率的に活用するための鍵となります。是非、これらのサービスを上手に利用して、思い出に残る旅行や特典を手に入れてください。\n\nまた、ClubEST では、国内線のサクララウンジを年 4 回利用することができたり、国際線でビジネスクラスチェックインを利用することができ大変お得です。\n\n## 特典航空券\n\nJAL マイルを効率的に貯める方法に加えて、特典航空券についても詳しく解説します。\n\nJAL の特典航空券は、貯めたマイルを使って航空券を交換することができる特典です。例えば、東京から札幌への特典航空券は、わずか 8000 マイルから交換することが可能です。このように、特典航空券は通常の航空券と比べて格安で利用することができるため、マイルを効率的に貯めることができれば、お得な旅行が実現します。\n\n特典航空券の交換には、一定の条件や制約があります。例えば、交換可能な航空券の本数には限りがあり、予約可能な席も限られています。また、特定の期間やルートに制限がある場合もありますので、交換前にしっかりと条件を確認することが重要です。\n\n特典航空券を利用する際には、早めの予約が大切です。特典航空券の予約開始日には、人気の高い路線や時期はすぐに埋まってしまうことがあるため、希望する航空券を確保するためには、早めの予約が必要です。\n\nさらに、JAL の特典航空券には、マイルを使ってアップグレードするオプションもあります。例えば、エコノミークラスからビジネスクラスへのアップグレードなどが可能です。このようなサービスを利用することで、より快適な旅を楽しむことができます。\n\nJAL の特典航空券は、マイルを有効活用する上で重要な要素の一つです。マイルを貯めるだけでなく、特典航空券の交換やアップグレードなども積極的に利用することで、より充実した旅行体験を手に入れることができます。\n\n※上記記事は ChatGPT3.5 で生成した記事です。誤りがありましたらご連絡ください。\n",
    "title": "JALマイルを効率的に貯める方法",
    "date": "2024-03-08T00:00:00.000Z",
    "categories": [
      "お金"
    ],
    "tags": [
      "旅行",
      "飛行機",
      "マイル"
    ],
    "coverImage": "https://dq7c5b6uxkdk2.cloudfront.net/posts/images/IMG_5545.png"
  },
  {
    "slug": "9d5cc191",
    "content": "\n## NISA（にーさ）とは？\n\nNISA（Nippon Individual Savings Account）は、日本政府が導入した個人の資産形成を促進するための制度です。この制度では、特定の金融商品（株式や投資信託など）に対して一定額の非課税枠が提供されます。投資家は年間 40 万円までの投資額に対して税制優遇を受けることができ、将来の資産形成やリタイアメントプランニングに活用されています。\n\n## 新 NISA とは？\n\n新 Nisa とは、2024 年から始まる新しい資産運用制度です。運用中や売却時に発生した利益に税金がかからないのが特徴です。年間で投資できる金額は、成長投資枠が 240 万円、つみたて投資枠が 120 万円です。非課税期間や口座開設期間は無期限になりました。\n\n## オススメの銘柄\n\n新 Nisa でおすすめの銘柄は、成長投資枠とつみたて投資枠によって異なります。成長投資枠では、株式や REIT などの上場商品に投資できます。つみたて投資枠では、金融庁が選定した一部の投資信託に投資できます。\n\n成長投資枠でおすすめの銘柄は、以下のようなものがあります。\n\n- [伊藤忠商事<8001>：トータルリターンの大きさはトップ](https://bing.com/search?q=%e6%96%b0Nisa%e3%81%ae%e6%a6%82%e8%a6%81%e3%81%a8%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e9%8a%98%e6%9f%84)[1](https://bing.com/search?q=%E6%96%B0Nisa%E3%81%AE%E6%A6%82%E8%A6%81%E3%81%A8%E3%81%8A%E3%81%99%E3%81%99%E3%82%81%E9%8A%98%E6%9F%84)\n\n- [日本たばこ産業<2914>：3 年連続で増収増益](https://bing.com/search?q=%e6%96%b0Nisa%e3%81%ae%e6%a6%82%e8%a6%81%e3%81%a8%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e9%8a%98%e6%9f%84)[1](https://bing.com/search?q=%E6%96%B0Nisa%E3%81%AE%E6%A6%82%E8%A6%81%E3%81%A8%E3%81%8A%E3%81%99%E3%81%99%E3%82%81%E9%8A%98%E6%9F%84)\n\n- [ビックカメラ <3048>:年間 3,000 円分の優待券を獲得できる](https://bing.com/search?q=%e6%96%b0Nisa%e3%81%ae%e6%a6%82%e8%a6%81%e3%81%a8%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e9%8a%98%e6%9f%84)[1](https://bing.com/search?q=%E6%96%B0Nisa%E3%81%AE%E6%A6%82%E8%A6%81%E3%81%A8%E3%81%8A%E3%81%99%E3%81%99%E3%82%81%E9%8A%98%E6%9F%84)\n\n- [ウーバー・テクノロジーズ（UBER）:さらなる成長が期待される配車サービス大手](https://bing.com/search?q=%e6%96%b0Nisa%e3%81%ae%e6%a6%82%e8%a6%81%e3%81%a8%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e9%8a%98%e6%9f%84)[1](https://bing.com/search?q=%E6%96%B0Nisa%E3%81%AE%E6%A6%82%E8%A6%81%E3%81%A8%E3%81%8A%E3%81%99%E3%81%99%E3%82%81%E9%8A%98%E6%9F%84)\n\n- [プロクター・アンド・ギャンブル：不況時でも売上が安定](https://bing.com/search?q=%e6%96%b0Nisa%e3%81%ae%e6%a6%82%e8%a6%81%e3%81%a8%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e9%8a%98%e6%9f%84)[1](https://bing.com/search?q=%E6%96%B0Nisa%E3%81%AE%E6%A6%82%E8%A6%81%E3%81%A8%E3%81%8A%E3%81%99%E3%81%99%E3%82%81%E9%8A%98%E6%9F%84)\n\nつみたて投資枠でおすすめの銘柄は、以下のようなものがあります。\n\n- [eMAXIS Slim 米国株式（S&P500）:アメリカの大企業に投資したい人におすすめ](https://bing.com/search?q=%e6%96%b0Nisa%e3%81%ae%e6%a6%82%e8%a6%81%e3%81%a8%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e9%8a%98%e6%9f%84)[2](https://www.president.co.jp/finance/contents/stock/nisa2024-recommended-name)\n\n- [eMAXIS Slim 全世界株式（オール・カントリー）：リスクを分散して投資したい人におすすめ](https://bing.com/search?q=%e6%96%b0Nisa%e3%81%ae%e6%a6%82%e8%a6%81%e3%81%a8%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e9%8a%98%e6%9f%84)[2](https://www.president.co.jp/finance/contents/stock/nisa2024-recommended-name)\n\n- [SBI・V・全米株式インデックス・ファンド：アメリカ市場全体に投資したい人にオススメ](https://bing.com/search?q=%e6%96%b0Nisa%e3%81%ae%e6%a6%82%e8%a6%81%e3%81%a8%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e9%8a%98%e6%9f%84)[2](https://www.president.co.jp/finance/contents/stock/nisa2024-recommended-name)\n\n- [＜購入・換金手数料なし＞ニッセイ NASDAQ100 インデックスファンド:アメリカのベンチャー企業に投資できる](https://bing.com/search?q=%e6%96%b0Nisa%e3%81%ae%e6%a6%82%e8%a6%81%e3%81%a8%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e9%8a%98%e6%9f%84)[1](https://bing.com/search?q=%E6%96%B0Nisa%E3%81%AE%E6%A6%82%E8%A6%81%E3%81%A8%E3%81%8A%E3%81%99%E3%81%99%E3%82%81%E9%8A%98%E6%9F%84)\n\n- [eMAXIS Slim 先進国債券インデックス:リスクを抑えて運用したい人におすすめ](https://bing.com/search?q=%e6%96%b0Nisa%e3%81%ae%e6%a6%82%e8%a6%81%e3%81%a8%e3%81%8a%e3%81%99%e3%81%99%e3%82%81%e9%8a%98%e6%9f%84)[1](https://bing.com/search?q=%E6%96%B0Nisa%E3%81%AE%E6%A6%82%E8%A6%81%E3%81%A8%E3%81%8A%E3%81%99%E3%81%99%E3%82%81%E9%8A%98%E6%9F%84)\n\n## どれを選べば良い？\n\n初めて投資を始める人は、つみたて投資枠で購入できる投資信託がおすすめです。プロが運用してくれるので、日々株価を追い続けなくても安定して運用することができます。ただし、運用手数料が高額になる銘柄もあるので、購入前に比較して検討することが大切です。\n\n慣れてきたら、成長投資枠で株主優待などが貰える銘柄を選んでみるのもよいでしょう。\n\n※上記記事は ChatGPT3.5 と gpt-4 で生成された記事です。誤りがある場合はご連絡ください。\n",
    "title": "NISAについて",
    "date": "2024-03-08T00:00:00.000Z",
    "categories": [
      "お金"
    ],
    "tags": [
      "新NISA"
    ],
    "coverImage": "https://dq7c5b6uxkdk2.cloudfront.net/posts/images/IMG_5546.jpeg"
  },
  {
    "slug": "be2d2dfc",
    "content": "\n## 何をしたいのか\n\n- Google AdSense でドメイン（トップレベルドメイン）を登録したい。\n\n- 上記を実現するために、blog.domain.com で運用しているサイトを domain.com からリダイレクトされるようにしたい。\n\nこの方法を以下で解説していきます。\n\n## 復習\n\n**Amazon Route 53**\n\nAWS が提供するドメインネームシステム (DNS) サービスで、ドメイン名の登録、ドメイン名と IP アドレスの関連付け、ドメイン名の高可用性化など、DNS に関連する機能を提供します。また、自動リクエストをインターネット経由でウェブサーバーなどのリソースに送信して、そのリソースが到達可能、使用可能、機能中であることを確認します。\n\n**Amazon S3**\n\n「Amazon Simple Storage Service」の略称で、AWS のサービスの一つです。オブジェクトストレージサービスの一種であり、データ容量を気にすることなく保存することができます。オブジェクトのファイル単位での出し入れが可能なので、その場に応じて自由な使い道が想定され、より柔軟なデータ保存が実行できます。\n\n**Amazon CloudFront**\n\nAWS が提供するグローバルなコンテンツ配信ネットワーク (CDN) サービスです。データやビデオ、アプリケーションといった静的/動的コンテンツを高速かつ安全に配信します。世界中にエッジサーバがあるため、あらゆる場所からのアクセスを改善することができます。また、CloudFront は、コンテンツを最良の方法で供給できるエッジロケーションに各ユーザーリクエストを AWS バックボーンネットワーク経由でルーティングすることで、コンテンツの配信を高速化します。\n\nこれらのサービスは、ウェブサイトやウェブアプリケーションの運用において、高速なコンテンツ配信、大量のデータ保存、安定したドメイン管理といった重要な役割を果たします。それぞれが異なる機能を持ちながらも、一緒に使用することで相乗効果を発揮します。\n\n## S3 の設定\n\nサービスから S3 を押下し、S3 のバケットを作成します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/01-1024x540-1.jpg)\n\nバケット名にトップレベルドメインを指定します。（Google Adsence の設定にはトップレベルドメインしかできない）\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/02-1-1024x804-1.jpg)\n\nパブリックアクセスを有効にして、バケットを作成します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/03-748x1024-1.jpg)\n\n作成したバケットを選択して、プロパティを選択します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/04-1024x483-1.jpg)\n\n｢静的ウェブホスティング｣の編集を押下します\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/05-1024x538-1.jpg)\n\n以下の設定をします\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/06-1024x533-1.jpg)\n\n## CloudFront の設定\n\nCloudFront のページに移動し、｢ディストリビューションを作成｣を押下します\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/07-1024x539-1.png)\n\nOrigin domain から先程作成したバケットのエンドポイントを選択します。\n\n選択後、｢Web サイトのエンドポイントを使用｣のボタンが表示されるので押下します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/08-1024x733-1.jpg)\n\n下方にスクロールして、｢セキュリティ保護を有効にしないでください｣を選択します。（こちらを選択しないと、プラスで課金されます）\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/09-1024x554-1.jpg)\n\n下方にスクロールして、代替ドメイン名（CNAME）の項目追加を選択します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/10-1024x725-1.jpg)\n\nここに、トップレベルドメイン（リクエスト元）を入力します\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/11-1024x668-1.jpg)\n\n証明書をリクエストを押下します\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/12-1024x928-1.jpg)\n\nACM のページにジャンプします。証明書タイプで、｢パブリック証明書をリクエスト｣を選択して、｢次へ｣を押下します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/13-1024x391-1.png)\n\n完全修飾ドメイン名にトップレベルドメイン（リダイレクト元）のドメインを入力します\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/14-1024x585-1.jpg)\n\n｢リクエスト｣を押下します\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/15-1024x500-1.jpg)\n\nCloudFront のページに戻ります。\n\nカスタム SSL 証明書の｢証明書を選択｣を選択して、候補からトップレベルドメイン（リクエスト元ドメイン）を選択します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/16-1024x928-1.jpg)\n\n｢ディストリビューションを作成｣を押下します\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/17-1024x667-1.jpg)\n\n## Route53 の設定\n\nRoute53 のページに移動します。ホストゾーンを選択します。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/18-1024x500-1.jpg)\n\nホストゾーンからトップレベルドメインのホストゾーン名を選択します\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/19-1024x498-1.jpg)\n\nレコード作成を押下\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/20-1024x348-1.jpg)\n\n以下の項目を設定して、｢レコード作成｣を押下する\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/21-1024x624-1.jpg)\n\nお疲れ様でした。上記で設定は、完了です。\n\nトップレベルドメインから転送先に転送されることを確認してみてください。\n",
    "title": "S3+CloudFront+Route53を使ってリダイレクトを実現する",
    "date": "2024-03-08T00:00:00.000Z",
    "categories": [
      "技術"
    ],
    "tags": [
      "AWS"
    ],
    "coverImage": "https://dq7c5b6uxkdk2.cloudfront.net/posts/images/スクリーンショット-2024-02-11-20.13.00.jpg"
  },
  {
    "slug": "a1704ffa",
    "content": "\n急遽、休暇をいただいたのでリフレッシュを兼ねて大阪へ旅行をしてみました！\n\n## ルール\n\nこの旅には、いくつかルールを作りました。\n\n- 細かい予定は立てない。\n\n- 旅行のまとめサイトやプランを見ない。\n\n日常の焦燥感を旅に持ち込みたくないという理由で上記のルールを設定しました。\n\n## 移動\n\n当日の 0 時頃に、思い立った旅立ったので事前割引が使えませんでした。\n\nそのため、JAL のスカイメイトを利用することにしました。\n\nJAL スカイメイトとは、25 歳以下の年齢で、当日に空き席がある場合普通運賃の半額以下で登場できる制度のことです。（詳しくは[こちら](https://www.jal.co.jp/jp/ja/dom/fare/skymate-fare/))\n\n## 旅程\n\n事前には、1mm も決めていませんでしたが振り返ってみると以下の旅程で動いていました。\n\n### 1 日目\n\n- 11:30 ~ 12:40 JAL115 便搭乗\n\n- 万博記念公園駅下車（大阪モノレール）\n\n- ららぽーとで、串かつ食べ放題を食べる。\n\n- 万博記念公園へ行く（太陽の塔見学･博物館見学）\n\n- 天王寺へ移動\n\n- 通天閣へ行く\n\n- 20:00 頃 アパホテル〈なんば南 恵美須町駅〉\n\n### 2 日目\n\n- 恵美須町駅から天王寺駅へ移動\n\n- あべのハルカスを見学\n\n- 天王寺駅からなんば駅へ移動\n\n- グリコサインの見学\n\n- たこ焼きを食べる\n\n- なんば駅から元町駅（兵庫）へ移動\n\n- 神戸ポートタワーの見学\n\n- 温泉（万葉の湯）で一服\n\n- 伊丹空港に帰る。\n\n- 20:15 ~ 21:20 JAL138 便搭乗\n\n## 感想\n\n本当に何も考えずに、大阪を観光していたので全然巡れないんじゃないかと思っていましたが、案外適当でも結構効率よく回れちゃうんだなと思いました。（自分の才能なのかも･･･なんて笑笑）\n\n## 写真たち\n\n太陽の塔\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/DSC01424-1024x576-1.jpg)\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/DSC01492-1024x576-1.jpg)\n\n通天閣\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/IMG_5423-1-768x1024-1.jpeg)\n\nあべのハルカス\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/DSC01591-1-576x1024-2.jpg)\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/DSC01627-1024x576-1.jpeg)\n\n道頓堀（なんば駅）\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/DSC01644-576x1024-1.jpg)\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/DSC01648-1024x576-1.jpg)\n\n神戸ポートタワー\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/DSC01723-1024x576-1.jpg)\n",
    "title": "【東京-大阪】平日気ままの旅",
    "date": "2024-03-08T00:00:00.000Z",
    "categories": [
      "国内旅行"
    ],
    "tags": [
      "国内旅行",
      "きままな旅"
    ],
    "coverImage": "https://dq7c5b6uxkdk2.cloudfront.net/posts/images/IMG_5423-1-768x1024-1.jpeg"
  },
  {
    "slug": "4902176f",
    "content": "\n## きっかけ\n\nJAL のマイルを貯めていて、国内旅行でマイルを使って旅をしていました。\n\nある時、｢海外だったら何マイルで行けるんだろう｣と JAL の公式ページを見たのがきっかけでした。\n\n## 初の海外\n\n初の海外旅行ということもあり、パスポートの取得から！という段階でした。\n\n## パスポートの取得の仕方\n\n### **1**日目\n\n#### 近くのパスポート申請センターに、必要書類を持っていきます。\n\n- 必要書類\n  - パスポート用写真\n\n  - 戸籍謄本（全部表示）\n\n詳しいことは、以下のサイトに書いてあります\n\n[日本国内及び海外でパスポートに関する申請手続きに通常必要な書類](https://www.mofa.go.jp/mofaj/toko/passport/pass_5.html)\n\nパスポート写真は写真機で撮ったものをそのまま持っていったらきれいに切り取ってくれました。\n\n#### **必**要書類の記入をします\n\n申請センターに行くと、記入用書類を受け取ります。そこに必要事項を記入して、窓口まで持っていきます。\n\n#### 本人確認\n\n本人確認（面談形式）が行われます。覚えている範囲だと、戸籍地や顔の確認などを行いました。その後、パスポート引換券を受け取ります。\n\n**\\*\\*\\***大体２〜３週間程度かかります。\\*\\*\n\n### **2**日目\n\n１日目に受け取ったパスポート引換券に記載の日付にパスポート申請センターへ向かいます。\n\n#### 収入印紙の購入\n\n収入印紙を購入します（=パスポート代）。代金は以下の通りです。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/スクリーンショット-2024-01-20-15.40.18-1024x446-1.png)\n\n#### パスポートの受け取り\n\n本人確認と、収入印紙を渡したら、手続き終了です。２日目はあまり時間がかからなかった印象でした。\n\nこれで、無事に海外に行けます。\n",
    "title": "【海外】1人旅のススメ！(パスポート準備編）",
    "date": "2024-03-08T00:00:00.000Z",
    "categories": [
      "海外旅行"
    ],
    "tags": [
      "1人旅",
      "パスポート"
    ],
    "coverImage": "https://dq7c5b6uxkdk2.cloudfront.net/posts/images/図1.jpg"
  },
  {
    "slug": "9ea6fabd",
    "content": "\n**決めること**\n\nパスポートを取得したら、以下の順にプランを考えます\n\n- 飛行機チケットの取得\n\n- 旅行先のホテル（滞在場所）\n\n- 観光場所\n\n- 空港からの行き帰りのルート\n\n**飛行機チケットの取得**\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/スクリーンショット-2024-02-02-15.30.11-1024x780-1.png)\n\n日本航空(JAL)の例です。\n\n希望の日付をクリックします。\n\nあとは、指示通り進めていきます･･･。（割愛）\n\n**機内食**\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/IMG_3692-1024x768-1.jpeg)\n\n機内食が事前に選択できます。\n\n普通の食事でいい場合は、｢普通の食事｣という項目が確かあったので、それを選択すれば良しです！\n\n**旅行先のホテル**\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/IMG_3727-1024x768-1.jpeg)\n\n次は旅行先のホテルを取ります。\n\n今回私が利用したのは**[agoda](https://www.agoda.com/ja-jp/)**です。\n\n世界中のホテルを日本語で検索できるのでとても便利です。\n\n今回は、**ロイヤル** **オーキッド** **グァム** **ホテル** **(Royal Orchid Guam Hotel)**  へ 3 泊 4 日の宿泊をしました。\n\n１人でこの部屋のサイズはかなり驚きました！  \n（料金はもちろん１人分）\n\n\\*注意したいのは、フロントへ現金で１００ドルをデポジットとして払わなくては行けなかった点です。（１２０ドルくらいしか持っていかなかったのでギリギリセーフでした）\n\n**観光場所**\n\n観光場所=｢何をしたいか｣×｢何ができるか｣ / 時間\n\nみたいな感じでしょうか。\n\nせっかくアメリカの地に入るとのことなので、\n\n- 日本じゃできないこと\n\nに焦点を当ててプランニングしました。\n\nやったことは以下の３点です。\n\n- 航空機操縦体験\n\n- 実弾の射撃体験\n\n- サンゴ礁の海で泳ぐ！\n\nどうやってそんなアクティビティを探すか。答えは、ここにありました。\n\n[VELTRA](https://www.veltra.com/jp/)\n\n最初は、怪しげなサイトと勘違いしていましたが、立派なオプショナルツアーを紹介してくれるサイトでした。\n\n上記のサイトで、射撃体験や航空機操縦のツアーの予約をしました。\n\n**航空機操縦体験**\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/IMG_3806-1024x768-1.jpeg)\n\n教官の方に撮影してもらいました！完全に自分で操縦してます。\n\n※教官に許可を得て、撮影してもらっています\n\n**実弾射撃体験の様子**\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/IMG_3861-1024x768-1.jpeg)\n\n実弾と実銃です。日本では体験できないですよね！\n\n**海で泳ぐ！**\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/スクリーンショット-2023-10-01-11.46.29-1-1024x580-1.jpg)\n\n魚がいっぱい！\n\n**感想**\n\nどれも素敵なアクティビティでしたが、３泊４日なので、若干物足りなさも感じてしまいました。もう１アクティビティ入れても良かったかもしれませんね（予算的には厳しかった･･･）\n\n**空港からの行き帰りのルート**\n\n忘れがちですが、非常に大事な点です。\n\n日本のように鉄道網が発達していないので、事前のバス予約がおすすめです。こちらも[VELTRA](https://www.veltra.com/jp/)で申し込みました。\n\n若干値段は高いですが、大荷物を持って空港に行くことを考えると、予約しておいて損はないと思います。\n\n行きは、空港のロビーで名前を呼んでくれ、バスへ案内してくれます。\n\n帰りは、ホテルのロビーで待ち合わせです。（予定より、２０分くらい早く来てびっくりしました）\n\n空港から滞在先、滞在先から空港までの移動手段は予め確保しておきましょう！\n",
    "title": "【海外】1人旅のススメ！(旅行プラン編）",
    "date": "2024-03-08T00:00:00.000Z",
    "categories": [
      "海外旅行"
    ],
    "tags": [
      "1人旅",
      "グアム",
      "海外旅行"
    ],
    "coverImage": "https://dq7c5b6uxkdk2.cloudfront.net/posts/images/IMG_3806-1024x768-2.jpeg"
  },
  {
    "slug": "864e6907",
    "content": "\n## きっかけ\n\n社内で勉強会の参加を呼びかけられていて、ノリで参加してみようと思ったのがきっかけでした。\n\n自分なりに色々探してみて、面白そうだったものに参加してみました。また、個人的に気になっている会社のオフィスに入れるのが魅力的でした。\n\n## 参加した勉強会\n\nAccenture Innovation Hub Tokyo で行われた、[大忘年会 〜2023 年生成 AI とデザインの総決算〜](https://algomatic.connpass.com/event/301675/)というものに参加をさせていただきました。\n\n![](https://dq7c5b6uxkdk2.cloudfront.net/posts/images/IMG_5219-768x1024-1.jpg)\n\n## 今回の目的\n\nいつか、自社でも登壇するためのイメージ集めと懇親会でネットワークを作れたらなと思って参加しました。\n\n## 感想と学び\n\n色々なサービスを立ち上げている人が集まっていたので、サービスのでき方やスピード感などを知ることができました。ChatGPT ができてからの行動量の差が特に自分と違いすぎて、ビビりました。２〜３日程度で、LINE のチャットボット作っている方もいてすごいなと思いました。\n\nまた、生成 AI を使って、ペルソナ（Digital Living Persona)を作成し、行動や感情などを分析してプロダクトに落とし込む取り組みが、革新的だと思いました。\n\n何度もインタビューしたり、何人もの人のインタビュー内容を分析して一般化するのってとても大変な作業だと思うので、生成 AI に聞くだけでこんなデザインにしたらええよって言ってくれるのはとてもありがたいなと思います。\n\n新サービスを立ち上げたいけど何をしたらいいかわかんないとか、こんなサービス作ってみようと思うけど受けそうかなみたいなのも聞くことができそうですね＾＾\n\n## 当日の後悔\n\n勉強会の後は、恒例のように懇親会が必ずと言っていいほど開かれます。\n\nしかし、大のコミュニケーション苦手な私がそんな場で一人でいきなり話せるわけもなく、１０分ほど話し相手を探してみたものの敢え無く撃沈しました。\n\n懇親会も楽しみたいという人は、是非誰か（コミュニケーションが得意そうな人）を誘って見ると話やすくて良いかもしれません。\n\nいつか、自分も登壇してかっこよく話せるようになりたいなーーー。\n\n## 将来への展望\n\n勉強会に参加することで、自分の知識やスキルの不足を痛感しましたが、それらを埋めるための努力を惜しまず行いたいと考えています。特に、コミュニケーション能力の向上やプレゼンテーションスキルの習得に注力し、将来的には自信を持って登壇し、他の参加者と有意義な議論を行えるようになりたいと思っています。また、新たなサービスやプロダクトの開発にも積極的に取り組み、革新的なアイデアを生み出すことで、自社の成長に貢献したいと考えています。\n\n## **まとめ**\n\nこの勉強会参加を通じて、新たな知識やネットワークを築くとともに、自己成長の課題を発見しました。今後も積極的な参加と自己啓発に努め、業務に活かしていきたいと考えています。\n",
    "title": "勉強会参加記",
    "date": "2024-03-08T00:00:00.000Z",
    "categories": [
      "技術"
    ],
    "tags": [
      "勉強会"
    ],
    "coverImage": "https://dq7c5b6uxkdk2.cloudfront.net/posts/images/スクリーンショット-2024-02-15-20.40.50.jpg"
  },
  {
    "slug": "61e893df",
    "content": "\nHimawari Project の羽ばたくエンジニアと申します！\n\n航空機や動画編集、プログラミング、写真など、多岐にわたる趣味を持つ私です。\n\n普段は IT コンサル会社で、平社員として日々業務に励んでいますが、その傍らで YouTube、GitHub、そして X（Twitter）などのプラットフォームを活用し、技術や趣味に関する情報を共有する活動を行っています。\n\n航空機の魅力にはまり、飛行機に関する知識や航空写真を撮影することが好きです。\n\nプログラミングについては、Java や JavaScript を中心に学んでおり、特に JavaScript には深い興味を抱いています。JavaScript を使用したウェブアプリケーションや Java(Spring Boot)を利用してアプリケーションを作成を行ったりして、新しい技術やフレームワークを習得することに喜びを感じています。\n\n写真撮影も趣味の一つであり、風景や建築物、そして日常の小さな出来事まで、様々なシーンを切り取ることを楽しんでいます。特に自然の美しさや都市の息吹を捉えることに興味があり、その魅力を写真で表現することに情熱を注いでいます。\n\nこのページは、私の興味や趣味を共有し、さらに多くの人々とつながり、情報交換を行う場として作成されました。興味を持ってくださった方は、ぜひフォローやチャンネル登録をお願いします。\n",
    "title": "自己紹介",
    "date": "2024-03-07T00:00:00.000Z",
    "coverImage": "https://dq7c5b6uxkdk2.cloudfront.net/posts/images/スクリーンショット-2024-01-15-20.11.35.png"
  }
]